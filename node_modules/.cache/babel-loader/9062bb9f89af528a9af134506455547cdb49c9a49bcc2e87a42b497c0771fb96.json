{"ast":null,"code":"import _objectSpread from \"E:/Chat_bot_intership/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/Chat_bot_intership/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"E:/Chat_bot_intership/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"E:/Chat_bot_intership/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Chat_bot_intership/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncToGenerator from \"E:/Chat_bot_intership/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _asyncIterator from \"E:/Chat_bot_intership/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { FormData, File } from 'openai/_shims/form-data';\nimport { getMultipartRequestOptions } from 'openai/_shims/getMultipartRequestOptions';\nimport { fileFromPath } from 'openai/_shims/fileFromPath';\nimport { isFsReadStream } from 'openai/_shims/node-readable';\nexport { fileFromPath };\nexport var isResponseLike = function isResponseLike(value) {\n  return value != null && typeof value === 'object' && typeof value.url === 'string' && typeof value.blob === 'function';\n};\nexport var isFileLike = function isFileLike(value) {\n  return value != null && typeof value === 'object' && typeof value.name === 'string' && typeof value.lastModified === 'number' && isBlobLike(value);\n};\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport var isBlobLike = function isBlobLike(value) {\n  return value != null && typeof value === 'object' && typeof value.size === 'number' && typeof value.type === 'string' && typeof value.text === 'function' && typeof value.slice === 'function' && typeof value.arrayBuffer === 'function';\n};\nexport var isUploadable = function isUploadable(value) {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport function toFile(_x, _x2) {\n  return _toFile.apply(this, arguments);\n}\nfunction _toFile() {\n  _toFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(value, name) {\n    var options,\n      _a,\n      _b,\n      _c,\n      blob,\n      bits,\n      type,\n      _args5 = arguments;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          options = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};\n          _context5.next = 3;\n          return value;\n        case 3:\n          value = _context5.sent;\n          if (!isResponseLike(value)) {\n            _context5.next = 10;\n            break;\n          }\n          _context5.next = 7;\n          return value.blob();\n        case 7:\n          blob = _context5.sent;\n          name || (name = (_a = new URL(value.url).pathname.split(/[\\\\/]/).pop()) !== null && _a !== void 0 ? _a : 'unknown_file');\n          return _context5.abrupt(\"return\", new File([blob], name, options));\n        case 10:\n          _context5.next = 12;\n          return getBytes(value);\n        case 12:\n          bits = _context5.sent;\n          name || (name = (_b = getName(value)) !== null && _b !== void 0 ? _b : 'unknown_file');\n          if (!options.type) {\n            type = (_c = bits[0]) === null || _c === void 0 ? void 0 : _c.type;\n            if (typeof type === 'string') {\n              options = _objectSpread(_objectSpread({}, options), {}, {\n                type: type\n              });\n            }\n          }\n          return _context5.abrupt(\"return\", new File(bits, name, options));\n        case 16:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _toFile.apply(this, arguments);\n}\nfunction getBytes(_x3) {\n  return _getBytes.apply(this, arguments);\n}\nfunction _getBytes() {\n  _getBytes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(value) {\n    var _a, parts, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          parts = [];\n          if (!(typeof value === 'string' || ArrayBuffer.isView(value) ||\n          // includes Uint8Array, Buffer, etc.\n          value instanceof ArrayBuffer)) {\n            _context6.next = 5;\n            break;\n          }\n          parts.push(value);\n          _context6.next = 45;\n          break;\n        case 5:\n          if (!isBlobLike(value)) {\n            _context6.next = 13;\n            break;\n          }\n          _context6.t0 = parts;\n          _context6.next = 9;\n          return value.arrayBuffer();\n        case 9:\n          _context6.t1 = _context6.sent;\n          _context6.t0.push.call(_context6.t0, _context6.t1);\n          _context6.next = 45;\n          break;\n        case 13:\n          if (!isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n          ) {\n            _context6.next = 44;\n            break;\n          }\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context6.prev = 16;\n          _iterator = _asyncIterator(value);\n        case 18:\n          _context6.next = 20;\n          return _iterator.next();\n        case 20:\n          if (!(_iteratorAbruptCompletion = !(_step = _context6.sent).done)) {\n            _context6.next = 26;\n            break;\n          }\n          chunk = _step.value;\n          parts.push(chunk); // TODO, consider validating?\n        case 23:\n          _iteratorAbruptCompletion = false;\n          _context6.next = 18;\n          break;\n        case 26:\n          _context6.next = 32;\n          break;\n        case 28:\n          _context6.prev = 28;\n          _context6.t2 = _context6[\"catch\"](16);\n          _didIteratorError = true;\n          _iteratorError = _context6.t2;\n        case 32:\n          _context6.prev = 32;\n          _context6.prev = 33;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context6.next = 37;\n            break;\n          }\n          _context6.next = 37;\n          return _iterator.return();\n        case 37:\n          _context6.prev = 37;\n          if (!_didIteratorError) {\n            _context6.next = 40;\n            break;\n          }\n          throw _iteratorError;\n        case 40:\n          return _context6.finish(37);\n        case 41:\n          return _context6.finish(32);\n        case 42:\n          _context6.next = 45;\n          break;\n        case 44:\n          throw new Error(\"Unexpected data type: \".concat(typeof value, \"; constructor: \").concat((_a = value === null || value === void 0 ? void 0 : value.constructor) === null || _a === void 0 ? void 0 : _a.name, \"; props: \").concat(propsForError(value)));\n        case 45:\n          return _context6.abrupt(\"return\", parts);\n        case 46:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[16, 28, 32, 42], [33,, 37, 41]]);\n  }));\n  return _getBytes.apply(this, arguments);\n}\nfunction propsForError(value) {\n  var props = Object.getOwnPropertyNames(value);\n  return \"[\".concat(props.map(function (p) {\n    return \"\\\"\".concat(p, \"\\\"\");\n  }).join(', '), \"]\");\n}\nfunction getName(value) {\n  var _a;\n  return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || (\n  // For fs.ReadStream\n  (_a = getStringFromMaybeBuffer(value.path)) === null || _a === void 0 ? void 0 : _a.split(/[\\\\/]/).pop());\n}\nvar getStringFromMaybeBuffer = function getStringFromMaybeBuffer(x) {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\nvar isAsyncIterableIterator = function isAsyncIterableIterator(value) {\n  return value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n};\nexport var MultipartBody = /*#__PURE__*/function (_Symbol$toStringTag) {\n  function MultipartBody(body) {\n    _classCallCheck(this, MultipartBody);\n    this.body = body;\n  }\n  _createClass(MultipartBody, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'MultipartBody';\n    }\n  }]);\n  return MultipartBody;\n}(Symbol.toStringTag);\nexport var isMultipartBody = function isMultipartBody(body) {\n  return body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n};\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport var maybeMultipartFormRequestOptions = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(opts) {\n    var form;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (hasUploadableValue(opts.body)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", opts);\n        case 2:\n          _context.next = 4;\n          return createForm(opts.body);\n        case 4:\n          form = _context.sent;\n          return _context.abrupt(\"return\", getMultipartRequestOptions(form, opts));\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function maybeMultipartFormRequestOptions(_x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var multipartFormRequestOptions = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(opts) {\n    var form;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return createForm(opts.body);\n        case 2:\n          form = _context2.sent;\n          return _context2.abrupt(\"return\", getMultipartRequestOptions(form, opts));\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function multipartFormRequestOptions(_x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var createForm = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(body) {\n    var form;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          form = new FormData();\n          _context3.next = 3;\n          return Promise.all(Object.entries(body || {}).map(function (_ref4) {\n            var _ref5 = _slicedToArray(_ref4, 2),\n              key = _ref5[0],\n              value = _ref5[1];\n            return addFormValue(form, key, value);\n          }));\n        case 3:\n          return _context3.abrupt(\"return\", form);\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function createForm(_x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar hasUploadableValue = function hasUploadableValue(value) {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (var k in value) {\n      if (hasUploadableValue(value[k])) return true;\n    }\n  }\n  return false;\n};\nvar addFormValue = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(form, key, value) {\n    var file;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!(value === undefined)) {\n            _context4.next = 2;\n            break;\n          }\n          return _context4.abrupt(\"return\");\n        case 2:\n          if (!(value == null)) {\n            _context4.next = 4;\n            break;\n          }\n          throw new TypeError(\"Received null for \\\"\".concat(key, \"\\\"; to pass null in FormData, you must use the string 'null'\"));\n        case 4:\n          if (!(typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean')) {\n            _context4.next = 8;\n            break;\n          }\n          form.append(key, String(value));\n          _context4.next = 26;\n          break;\n        case 8:\n          if (!isUploadable(value)) {\n            _context4.next = 15;\n            break;\n          }\n          _context4.next = 11;\n          return toFile(value);\n        case 11:\n          file = _context4.sent;\n          form.append(key, file);\n          _context4.next = 26;\n          break;\n        case 15:\n          if (!Array.isArray(value)) {\n            _context4.next = 20;\n            break;\n          }\n          _context4.next = 18;\n          return Promise.all(value.map(function (entry) {\n            return addFormValue(form, key + '[]', entry);\n          }));\n        case 18:\n          _context4.next = 26;\n          break;\n        case 20:\n          if (!(typeof value === 'object')) {\n            _context4.next = 25;\n            break;\n          }\n          _context4.next = 23;\n          return Promise.all(Object.entries(value).map(function (_ref7) {\n            var _ref8 = _slicedToArray(_ref7, 2),\n              name = _ref8[0],\n              prop = _ref8[1];\n            return addFormValue(form, \"\".concat(key, \"[\").concat(name, \"]\"), prop);\n          }));\n        case 23:\n          _context4.next = 26;\n          break;\n        case 25:\n          throw new TypeError(\"Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got \".concat(value, \" instead\"));\n        case 26:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function addFormValue(_x7, _x8, _x9) {\n    return _ref6.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["FormData","File","getMultipartRequestOptions","fileFromPath","isFsReadStream","isResponseLike","value","url","blob","isFileLike","name","lastModified","isBlobLike","size","type","text","slice","arrayBuffer","isUploadable","toFile","_x","_x2","_toFile","apply","arguments","_callee5","options","_a","_b","_c","bits","_args5","_regeneratorRuntime","wrap","_callee5$","_context5","prev","next","length","undefined","sent","URL","pathname","split","pop","abrupt","getBytes","getName","_objectSpread","stop","_x3","_getBytes","_asyncToGenerator","mark","parts","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","_callee6$","_context6","isView","ArrayBuffer","push","t0","t1","call","_asyncIterator","done","t2","return","finish","Error","concat","_callee6","propsForError","props","Object","getOwnPropertyNames","map","p","join","getStringFromMaybeBuffer","filename","path","x","Buffer","String","Symbol","asyncIterator","MultipartBody","_Symbol$toStringTag","body","_classCallCheck","toStringTag","isMultipartBody","maybeMultipartFormRequestOptions","_ref","_callee","opts","form","_callee$","_context","hasUploadableValue","createForm","_x4","multipartFormRequestOptions","_ref2","_callee2","_callee2$","_context2","_x5","_ref3","_callee3","_callee3$","_context3","Promise","all","entries","_ref4","_ref5","_slicedToArray","key","addFormValue","_x6","isArray","some","k","_ref6","_callee4","file","_callee4$","_context4","TypeError","append","Array","_x7","_x8","_x9"],"sources":["E:\\Chat_bot_intership\\node_modules\\openai\\src\\uploads.ts"],"sourcesContent":["import { type RequestOptions } from './core.js';\nimport { type Readable } from './_shims/node-readable.js';\nimport { type BodyInit } from './_shims/fetch.js';\nimport { FormData, File, type Blob, type FilePropertyBag } from './_shims/form-data.js';\nimport { getMultipartRequestOptions } from './_shims/getMultipartRequestOptions.js';\nimport { fileFromPath } from './_shims/fileFromPath.js';\nimport { type FsReadStream, isFsReadStream } from './_shims/node-readable.js';\n\nexport { fileFromPath };\n\ntype BlobLikePart = string | ArrayBuffer | ArrayBufferView | BlobLike | Uint8Array | DataView;\nexport type BlobPart = string | ArrayBuffer | ArrayBufferView | Blob | Uint8Array | DataView;\n\n/**\n * Typically, this is a native \"File\" class.\n *\n * We provide the {@link toFile} utility to convert a variety of objects\n * into the File class.\n *\n * For convenience, you can also pass a fetch Response, or in Node,\n * the result of fs.createReadStream().\n */\nexport type Uploadable = FileLike | ResponseLike | FsReadStream;\n\n/**\n * Intended to match web.Blob, node.Blob, node-fetch.Blob, etc.\n */\nexport interface BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size) */\n  readonly size: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type) */\n  readonly type: string;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text) */\n  text(): Promise<string>;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice) */\n  slice(start?: number, end?: number): BlobLike;\n  // unfortunately @types/node-fetch@^2.6.4 doesn't type the arrayBuffer method\n}\n\n/**\n * Intended to match web.File, node.File, node-fetch.File, etc.\n */\nexport interface FileLike extends BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified) */\n  readonly lastModified: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name) */\n  readonly name: string;\n}\n\n/**\n * Intended to match web.Response, node.Response, node-fetch.Response, etc.\n */\nexport interface ResponseLike {\n  url: string;\n  blob(): Promise<BlobLike>;\n}\n\nexport const isResponseLike = (value: any): value is ResponseLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.url === 'string' &&\n  typeof value.blob === 'function';\n\nexport const isFileLike = (value: any): value is FileLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.name === 'string' &&\n  typeof value.lastModified === 'number' &&\n  isBlobLike(value);\n\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = (value: any): value is BlobLike & { arrayBuffer(): Promise<ArrayBuffer> } =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.size === 'number' &&\n  typeof value.type === 'string' &&\n  typeof value.text === 'function' &&\n  typeof value.slice === 'function' &&\n  typeof value.arrayBuffer === 'function';\n\nexport const isUploadable = (value: any): value is Uploadable => {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n\nexport type ToFileInput = Uploadable | Exclude<BlobLikePart, string> | AsyncIterable<BlobLikePart>;\n\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(\n  value: ToFileInput | PromiseLike<ToFileInput>,\n  name?: string | null | undefined,\n  options: FilePropertyBag | undefined = {},\n): Promise<FileLike> {\n  // If it's a promise, resolve it.\n  value = await value;\n\n  if (isResponseLike(value)) {\n    const blob = await value.blob();\n    name ||= new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file';\n\n    return new File([blob as any], name, options);\n  }\n\n  const bits = await getBytes(value);\n\n  name ||= getName(value) ?? 'unknown_file';\n\n  if (!options.type) {\n    const type = (bits[0] as any)?.type;\n    if (typeof type === 'string') {\n      options = { ...options, type };\n    }\n  }\n\n  return new File(bits, name, options);\n}\n\nasync function getBytes(value: ToFileInput): Promise<Array<BlobPart>> {\n  let parts: Array<BlobPart> = [];\n  if (\n    typeof value === 'string' ||\n    ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer\n  ) {\n    parts.push(value);\n  } else if (isBlobLike(value)) {\n    parts.push(await value.arrayBuffer());\n  } else if (\n    isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n  ) {\n    for await (const chunk of value) {\n      parts.push(chunk as BlobPart); // TODO, consider validating?\n    }\n  } else {\n    throw new Error(\n      `Unexpected data type: ${typeof value}; constructor: ${\n        value?.constructor?.name\n      }; props: ${propsForError(value)}`,\n    );\n  }\n\n  return parts;\n}\n\nfunction propsForError(value: any): string {\n  const props = Object.getOwnPropertyNames(value);\n  return `[${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\n\nfunction getName(value: any): string | undefined {\n  return (\n    getStringFromMaybeBuffer(value.name) ||\n    getStringFromMaybeBuffer(value.filename) ||\n    // For fs.ReadStream\n    getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop()\n  );\n}\n\nconst getStringFromMaybeBuffer = (x: string | Buffer | unknown): string | undefined => {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\n\nconst isAsyncIterableIterator = (value: any): value is AsyncIterableIterator<unknown> =>\n  value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n\nexport class MultipartBody {\n  constructor(public body: Readable | BodyInit) {}\n  get [Symbol.toStringTag](): string {\n    return 'MultipartBody';\n  }\n}\n\nexport const isMultipartBody = (body: any): body is MultipartBody =>\n  body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async <T extends {} = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  if (!hasUploadableValue(opts.body)) return opts;\n\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const multipartFormRequestOptions = async <T extends {} = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const createForm = async <T = Record<string, unknown>>(body: T | undefined): Promise<FormData> => {\n  const form = new FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\n\nconst hasUploadableValue = (value: unknown): boolean => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue((value as any)[k])) return true;\n    }\n  }\n  return false;\n};\n\nconst addFormValue = async (form: FormData, key: string, value: unknown): Promise<void> => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(\n      `Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`,\n    );\n  }\n\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (isUploadable(value)) {\n    const file = await toFile(value);\n    form.append(key, file as File);\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(\n      Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)),\n    );\n  } else {\n    throw new TypeError(\n      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`,\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}