{"ast":null,"code":"var _jsxFileName = \"E:\\\\Chat_bot_intership\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport OpenAI from 'openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [qType, setqType] = useState(\"general\");\n  const [cbResponse, setcbResponse] = useState(\"\");\n  const [userInput, setUserInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const PARAMS = {\n    max_tokens: 256\n  };\n  const apiKey = process.env.REACT_APP_OPEN_API_KEY;\n  const openai = new OpenAI({\n    apiKey,\n    dangerouslyAllowBrowser: true\n  });\n  const getInstruction = async ins => {\n    let prompt = ` ${ins}`;\n    return prompt;\n  };\n  const handleEvent = async e => {\n    e.preventDefault();\n    const prompt = await getInstruction(userInput);\n    console.log(userInput);\n    //const endpoint = 'https://api.openai.com/v1/engines/davinci-codex/completions';\n    const body = {\n      ...PARAMS,\n      prompt\n    };\n    console.log(body);\n    try {\n      setIsLoading(true);\n      const response = await fetch(\"/GPT\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          data: prompt\n        })\n      });\n      const data = await response.json();\n      console.log(data[0]);\n      setcbResponse(data[0]);\n    } catch (error) {\n      console.error('API Error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"hello World \", apiKey ? apiKey.slice(0, 5) : \"API Key Missing\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"form-control my-3\",\n        \"aria-label\": \"With textarea\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        placeholder: \"enter your story prompt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleEvent,\n      className: \"btn btn-primary\",\n      disabled: isLoading,\n      children: isLoading ? \"Generating...\" : \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), cbResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: cbResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"RSgDhMl2CGM2/sFuLnrJH1a5EGo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","OpenAI","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","qType","setqType","cbResponse","setcbResponse","userInput","setUserInput","isLoading","setIsLoading","PARAMS","max_tokens","apiKey","process","env","REACT_APP_OPEN_API_KEY","openai","dangerouslyAllowBrowser","getInstruction","ins","prompt","handleEvent","e","preventDefault","console","log","body","response","fetch","method","headers","JSON","stringify","data","json","error","children","slice","fileName","_jsxFileName","lineNumber","columnNumber","className","value","onChange","target","placeholder","type","onClick","disabled","_c","$RefreshReg$"],"sources":["E:/Chat_bot_intership/src/App.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport OpenAI from 'openai';\r\n\r\nfunction App() {\r\n  const [qType, setqType] = useState(\"general\");\r\n  const [cbResponse, setcbResponse] = useState(\"\");\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const PARAMS = {\r\n    max_tokens: 256\r\n  };\r\n  const apiKey = process.env.REACT_APP_OPEN_API_KEY;\r\n  const openai = new OpenAI({ apiKey, dangerouslyAllowBrowser: true });\r\n\r\n  const getInstruction = async (ins) => {\r\n    let prompt = ` ${ins}`;\r\n    return prompt;\r\n  }\r\n\r\n  const handleEvent = async (e) => {\r\n    e.preventDefault();\r\n    const prompt = await getInstruction(userInput);\r\n    console.log(userInput);\r\n    //const endpoint = 'https://api.openai.com/v1/engines/davinci-codex/completions';\r\n    const body = { ...PARAMS, prompt };\r\n    console.log(body)\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await fetch(\"/GPT\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          \r\n        },\r\n        body: JSON.stringify({data:prompt})\r\n      });\r\n      const data = await response.json();\r\n      console.log(data[0])\r\n      setcbResponse(data[0]);\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        hello World {apiKey ? apiKey.slice(0, 5) : \"API Key Missing\"}\r\n      </div>\r\n      <div className=\"input-group\">\r\n        <textarea\r\n          className=\"form-control my-3\"\r\n          aria-label=\"With textarea\"\r\n          value={userInput}\r\n          onChange={e => setUserInput(e.target.value)}\r\n          placeholder=\"enter your story prompt\"\r\n        ></textarea>\r\n      </div>\r\n      <button\r\n        type=\"button\"\r\n        onClick={handleEvent}\r\n        className=\"btn btn-primary\"\r\n        disabled={isLoading}\r\n      >\r\n        {isLoading ? \"Generating...\" : \"Generate\"}\r\n      </button>\r\n      {cbResponse && <div>{cbResponse}</div>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}